table1(~ chao1 + margalef + menhinick + fisher_alpha + faith_pd + gini_index + strong + pielou_evenness + shannon_entropy + simpson | condition, data=all_data)
plot_violin <- function(df, column){
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
mean_line <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::summarise(grp_mean=mean(.data[[metric[i]]]))
plot_data <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::mutate(m = mean(.data[[metric[i]]]))
violin[[i]] <- plot_data %>% ggplot(aes(x = .data[[metric[i]]], y = reorder(.data[[column]], -m), color = .data[[column]], fill = .data[[column]])) +
geom_violin()+
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_vline(data = mean_line, aes(xintercept = grp_mean, color = .data[[column]]), linetype = "dashed")+
labs(x = metric[i])+
ylab("")+
theme(legend.position="none")
if(metric[i] != "shannon_entropy" & metric[i] != "strong" & metric[i] != "gini_index"  & metric[i] != "menhinick"){
violin[[i]] <- violin[[i]] +
scale_x_continuous(trans = 'log10') +
xlab(paste(metric[i], "(log10)", sep = " "))
}
}
return(violin)
}
do_wilcox_test <- function(df, column){
test <- list()
for (i in 1:length(metric)){
test[[i]] <- pairwise.wilcox.test(df[[metric[i]]], df[[column]], p.adjust.method="none") %>%
broom::tidy() %>% add_column(parameter = metric[i], .before='group1')
test[[i]]$p.value <- round(test[[i]]$p.value, digits = 5)
}
tests <- do.call(what = rbind, args = test)
return(tests)
}
table(IBD$condition)
table(UC$condition)
#merge two datasets
UC_check <- UC
UC_check$condition <- "UC_2"
IBD_check <-  rbind.fill(IBD, UC_check)
IBD_check$condition <- as.factor(IBD_check$condition)
table(IBD_check$condition)
nrow(IBD_check)
violin_IBD_check <- vector('list', length(metric))
# Use violin function
violin_IBD_check <- plot_violin(IBD_check, "condition")
grid.arrange(violin_IBD_check[[1]], violin_IBD_check[[2]],violin_IBD_check[[3]], violin_IBD_check[[4]],violin_IBD_check[[5]], violin_IBD_check[[6]],violin_IBD_check[[7]], violin_IBD_check[[8]],violin_IBD_check[[9]], violin_IBD_check[[10]], ncol=4, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in IBD datasets", gp=gpar(fontsize=10,font=2)))
tests_IBD_check <- list()
tests_IBD_check <- do_wilcox_test(IBD_check, "condition")
table <- tests_IBD_check %>%
add_column(p.adjusted = round(p.adjust(tests_IBD_check$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different conditions")
table
#merge two datasets
healthy_disease <-  rbind.fill(all_healthy, IBD, UC)
healthy_disease$condition <- as.factor(healthy_disease$condition)
healthy_disease$condition <- relevel(healthy_disease$condition, "healthy")
table(healthy_disease$condition)
violin_IBD <- vector('list', length(metric))
# Use violin function
violin_IBD <- plot_violin(healthy_disease, "condition")
grid.arrange(violin_IBD[[1]], violin_IBD[[2]],violin_IBD[[3]], violin_IBD[[4]],violin_IBD[[5]], violin_IBD[[6]],violin_IBD[[7]], violin_IBD[[8]],violin_IBD[[9]], violin_IBD[[10]], ncol=4, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in IBD datasets", gp=gpar(fontsize=10,font=2)))
tests_IBD <- list()
tests_IBD <- do_wilcox_test(healthy_disease, "condition")
table1 <- tests_IBD %>%
add_column(p.adjusted = round(p.adjust(tests_IBD$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value)  %>%
filter(group1=="CD") %>%
filter(group2=="healthy") %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different conditions")
table2 <- tests_IBD %>%
add_column(p.adjusted = round(p.adjust(tests_IBD$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value)  %>%
filter(group1=="UC") %>%
filter(group2=="healthy") %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different conditions")
table1
table2
wilcox_healthy_disease <- healthy_disease %>%
summarise(Chao1 = wilcox.test(chao1[condition == "healthy"], chao1[condition != "healthy"])$p.value,
Margalef = wilcox.test(margalef[condition == "healthy"], margalef[condition != "healthy"])$p.value,
Menhinick = wilcox.test(menhinick[condition == "healthy"], menhinick[condition != "healthy"])$p.value,
Fisher = wilcox.test(fisher_alpha[condition == "healthy"], fisher_alpha[condition != "healthy"])$p.value,
Faith = wilcox.test(faith_pd[condition == "healthy"], faith_pd[condition != "healthy"])$p.value,
Gini = wilcox.test(gini_index[condition == "healthy"], gini_index[condition != "healthy"])$p.value,
Strong = wilcox.test(strong[condition == "healthy"], strong[condition != "healthy"])$p.value,
Pielou = wilcox.test(pielou_evenness[condition == "healthy"], pielou_evenness[condition != "healthy"])$p.value,
Shannon = wilcox.test(shannon_entropy[condition == "healthy"], shannon_entropy[condition != "healthy"])$p.value,
Sipson = wilcox.test(simpson[condition == "healthy"], simpson[condition != "healthy"])$p.value)
wilcox_healthy_disease <- t(wilcox_healthy_disease)
colnames(wilcox_healthy_disease) <- c("p.value")
wilcox_healthy_disease <- data.frame(alpha_metric = row.names(wilcox_healthy_disease), wilcox_healthy_disease)
wilcox_healthy_disease$p.value <- round(wilcox_healthy_disease$p.value, digits = 5)
wilcox_healthy_disease %>%
add_column(p.adjusted = round(p.adjust(wilcox_healthy_disease$p.value, "fdr"), digits = 5), .after='p.value') %>%
arrange(p.value)  %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of alpha diversity indices between healthy and IBD samples")
kruskal_results <- healthy_disease %>%
summarise(Chao1 = kruskal.test(healthy_disease$chao1 ~ healthy_disease$condition)$p.value,
Margalef = kruskal.test(healthy_disease$margalef ~ healthy_disease$condition)$p.value,
Menhinick = kruskal.test(healthy_disease$menhinick ~ healthy_disease$condition)$p.value,
Fisher = kruskal.test(healthy_disease$fisher_alpha ~ healthy_disease$condition)$p.value,
Faith = kruskal.test(healthy_disease$faith_pd ~ healthy_disease$condition)$p.value,
Gini = kruskal.test(healthy_disease$gini_index ~ healthy_disease$condition)$p.value,
Strong = kruskal.test(healthy_disease$strong ~ healthy_disease$condition)$p.value,
Pielou = kruskal.test(healthy_disease$pielou_evenness ~ healthy_disease$condition)$p.value,
Shannon = kruskal.test(healthy_disease$shannon_entropy ~ healthy_disease$condition)$p.value,
Sipson = kruskal.test(healthy_disease$simpson ~ healthy_disease$condition)$p.value)
kruskal_results_df <- as.data.frame(t(kruskal_results))
colnames(kruskal_results_df) <- c("p.value")
kruskal_results_df <- data.frame(alpha_metric = row.names(kruskal_results_df), kruskal_results_df)
kruskal_results_df$p.value <- round(kruskal_results_df$p.value, digits = 5)
kruskal_results_df %>%
add_column(p.adjusted = round(p.adjust(kruskal_results_df$p.value, "fdr"), digits = 5), .after='p.value') %>%
arrange(p.value)  %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Kruskal-Wallis test for differentiation of alpha diversity indices across different conditions")
table(CD$description, CD$condition)
table(CD$condition)
table(CD$surgery_and_ibd)
violin_CDa <- vector('list', length(metric))
# Use violin function
violin_CDa <- plot_violin(CD, "condition")
grid.arrange(violin_CDa[[1]], violin_CDa[[2]], violin_CDa[[3]], violin_CDa[[4]], violin_CDa[[5]], violin_CDa[[6]], violin_CDa[[7]],  violin_CDa[[9]], violin_CDa[[10]], ncol=4, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in longitudinal CD datasets", gp=gpar(fontsize=10,font=2)))
violin_CDb <- vector('list', length(metric))
# Use violin function
violin_CDb <- plot_violin(CD, "surgery_and_ibd")
#violin_CDb
grid.arrange(violin_CDb[[1]], violin_CDb[[2]], violin_CDb[[3]], violin_CDb[[4]], violin_CDb[[5]], violin_CDb[[6]], violin_CDb[[7]], violin_CDb[[8]], violin_CDb[[9]], violin_CDb[[10]], ncol=3)
violin_CD_surg <- vector('list', length(metric))
# Use violin function
violin_CD_surg <- plot_violin(CD, "surgery_type")
violin_CD_surg
CD_1 <- healthy_disease[healthy_disease$condition != "UC",]
CD_surg <- CD
CD_surg$condition <- NULL
names(CD_surg)[names(CD_surg) == 'surgery_and_ibd'] <- 'condition'
CD_check <- rbind.fill(CD_1, CD_surg)
CD_check$condition[CD_check$condition == "CD"] <-'CD_1'
CD_check$condition[CD_check$condition == "crohns"] <-'CD_2'
CD_check$condition[CD_check$condition == "crohns (surgery)"] <-'CD_surgery'
CD_check$condition[CD_check$condition == "healthy"] <-'control(AGP)'
CD_check$condition[CD_check$condition == "control"] <-'control_2'
violin_CD_check <- vector('list', length(metric))
# Use violin function
violin_CD_check <- plot_violin(CD_check, "condition")
violin_CD_check
test_CD_1 <- list()
test_CD <- list()
test_CD_1 <- do_wilcox_test(CD_1, "condition")
test_CD <- do_wilcox_test(CD, "surgery_and_ibd")
table_CD_1 <- test_CD_1 %>%
add_column(p.adjusted = round(p.adjust(test_CD_1$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Crohns vs controls in CD_1 dataset")
table_CD_2 <- test_CD %>%
add_column(p.adjusted = round(p.adjust(test_CD$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value)  %>%
filter(group1 == "crohns")  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Crohns vs controls in CD dataset")
table_CD_3 <- test_CD %>%
add_column(p.adjusted = round(p.adjust(test_CD$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value)  %>%
filter(group1 != "crohns" & group2 == "control")  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Crohns (surgery) vs controls in CD dataset")
table_CD_1
table_CD_2
table_CD_3
CD_check_w <- CD_check %>% filter(CD_check$condition != "control(AGP)" & CD_check$condition != "control_2" )
test_CD_3 <- list()
test_CD_3 <- do_wilcox_test(CD_check_w, "condition")
table_CD_3 <- test_CD_3 %>%
add_column(p.adjusted = round(p.adjust(test_CD_3$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
filter(group1 != "CD_surgery")  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different groups of Crhohn's disease patients")
table_CD_3
test_CD_check <- list()
test_CD_check <- do_wilcox_test(CD_check, "condition")
test_CD_check %>%
add_column(p.adjusted = round(p.adjust(test_CD_check$p.value, "fdr"), digits=5), .after='p.value') %>%
filter(group1 == "control(AGP)" & group2 == "control_2") %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "AGP vs controls in CD_2 dataset")
CD_merge <- CD %>%
filter(condition != "not applicable")
CD_merge$condition[CD_merge$condition=="control"] <- "healthy"
CD_merge$condition[CD_merge$condition=="crohns"] <- "CD"
# healthy_disease_2 <- rbind.fill(healthy_disease, before_trans, CD_merge)
healthy_disease_2 <- rbind.fill(all_healthy, IBD, UC, CD_merge)
# Sizes of each dataset
table(healthy_disease_2$condition)
# Do Mann-Whitney-Wilcoxon test to see which parameters show significant differenc between healthy and unhealthy samples
wilcox_p_value <- healthy_disease_2 %>%
summarise(Shannon = wilcox.test(shannon_entropy[condition == "healthy"], shannon_entropy[condition != "healthy"])$p.value,
Chao1 = wilcox.test(chao1[condition == "healthy"], chao1[condition != "healthy"])$p.value,
Menhinick = wilcox.test(menhinick[condition == "healthy"], menhinick[condition != "healthy"])$p.value,
Margalef = wilcox.test(margalef[condition == "healthy"], margalef[condition != "healthy"])$p.value,
Simpson = wilcox.test(simpson[condition == "healthy"], simpson[condition != "healthy"])$p.value,
Fisher = wilcox.test(fisher_alpha[condition == "healthy"], fisher_alpha[condition != "healthy"])$p.value,
Pielou = wilcox.test(pielou_evenness[condition == "healthy"], pielou_evenness[condition != "healthy"])$p.value,
Gini = wilcox.test(gini_index[condition == "healthy"], gini_index[condition != "healthy"])$p.value,
Strong = wilcox.test(strong[condition == "healthy"], strong[condition != "healthy"])$p.value,
Faith = wilcox.test(faith_pd[condition == "healthy"], faith_pd[condition != "healthy"])$p.value)
wilcox_p_value <- t(wilcox_p_value)
colnames(wilcox_p_value) <- c("p.value")
wilcox_p_value <- data.frame(Alpha_Metric = row.names(wilcox_p_value), wilcox_p_value)
wilcox_p_value$p.value <- round(wilcox_p_value$p.value, digits = 5)
wilcox_p_value %>%
add_column(p.adjusted = round(p.adjust(wilcox_p_value$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different parameters between healthy and unhealthy samples")
kruskal_results <- healthy_disease_2 %>%
summarise(Shannon = kruskal.test(healthy_disease_2$shannon_entropy ~ healthy_disease_2$condition)$p.value,
Chao1 = kruskal.test(healthy_disease_2$chao1 ~ healthy_disease_2$condition)$p.value,
Fisher = kruskal.test(healthy_disease_2$fisher_alpha ~ healthy_disease_2$condition)$p.value,
Margalef =kruskal.test(healthy_disease_2$margalef ~ healthy_disease_2$condition)$p.value,
Simpson = kruskal.test(healthy_disease_2$simpson ~ healthy_disease_2$condition)$p.value,
Menhinick = kruskal.test(healthy_disease_2$menhinick ~ healthy_disease_2$condition)$p.value,
Pielou = kruskal.test(healthy_disease_2$pielou_evenness ~ healthy_disease_2$condition)$p.value,
Gini = kruskal.test(healthy_disease_2$gini_index ~ healthy_disease_2$condition)$p.value,
Strong = kruskal.test(healthy_disease_2$strong ~ healthy_disease_2$condition)$p.value,
Faith = kruskal.test(healthy_disease_2$faith_pd ~ healthy_disease_2$condition)$p.value)
kruskal_results <- as.data.frame(t(kruskal_results))
colnames(kruskal_results) <- c("p.value")
kruskal_results <- data.frame(Alpha_Metric = row.names(kruskal_results), kruskal_results)
kruskal_results$p.value <- round(kruskal_results$p.value, digits = 5)
kruskal_results %>%
add_column(p.adjusted = round(p.adjust(kruskal_results$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Kruskal-Wallis test for differentiation of different parameters across different conditions")
table(CDI$PPI_use)
table(CDI$prior_antibiotics)
table(CDI$response_to_treatment)
table(CDI$recurrence)
table(CDI$severe_CDI)
#install.packages("expss")
library(expss)
cross_cases(CDI, severe_CDI, prior_antibiotics)
cross_cases(CDI, severe_CDI, response_to_treatment)
cross_cases(CDI, severe_CDI, recurrence)
cross_cases(CDI, response_to_treatment, recurrence)
CDI$condition <- "CDI"
for (i in 1:nrow(CDI)){
if (CDI$BMI[i] < 25){
CDI$BMI_cat[i] <- "normal"
} else {
CDI$BMI_cat[i] <- "obese"
}
}
table(CDI$BMI_cat)
violin_CDI_BMI <- vector('list', length(metric))
# Use violin function
violin_CDI_BMI <- plot_violin(CDI, "BMI_cat")
#violin_CDb
grid.arrange(violin_CDI_BMI[[1]], violin_CDI_BMI[[2]], violin_CDI_BMI[[3]], violin_CDI_BMI[[4]], violin_CDI_BMI[[5]], violin_CDI_BMI[[6]], violin_CDI_BMI[[7]], violin_CDI_BMI[[8]], violin_CDI_BMI[[9]], violin_CDI_BMI[[10]], ncol=3)
test_CDI_BMI <- list()
test_CDI_BMI <- do_wilcox_test(CDI, "BMI_cat")
test_CDI_BMI <- test_CDI_BMI %>%
add_column(p.adjusted = round(p.adjust(test_CDI_BMI$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for...")
test_CDI_BMI
CDI_check <- rbind.fill(CDI, all_healthy)
violin_CDI_healthy <- vector('list', length(metric))
# Use violin function
violin_CDI_healthy <- plot_violin(CDI_check, "condition")
#violin_CDb
grid.arrange(violin_CDI_healthy[[1]], violin_CDI_healthy[[2]], violin_CDI_healthy[[3]], violin_CDI_healthy[[4]], violin_CDI_healthy[[5]], violin_CDI_healthy[[6]], violin_CDI_healthy[[7]], violin_CDI_healthy[[8]], violin_CDI_healthy[[9]], violin_CDI_healthy[[10]], ncol=3)
test_CDI_healthy <- list()
test_CDI_healthy <- do_wilcox_test(CDI_check, "condition")
test_CDI_healthy <- test_CDI_healthy %>%
add_column(p.adjusted = round(p.adjust(test_CDI_healthy$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different groups of Crhohn's disease patients")
test_CDI_healthy
table(CDI_FMT$disease_state)
table(CDI_FMT$animations_subject)
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD1"] <-'subject_1'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD2"] <-'subject_2'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD3"] <-'subject_3'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD4"] <-'subject_4'
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
facet_wrap(dplyr::vars(CDI_FMT$animations_subject), scale="free", ncol=2)
}
progression
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
facet_wrap(dplyr::vars(CDI_FMT$animations_subject), ncol=2)
}
progression
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(y="")
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(y="")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(x="")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(x="none")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
theme(legend.position="none")
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
subjects <- unique(CDI_FMT$animations_subject)
data <- CDI_FMT[CDI_FMT$animations_subject == subjects[1],]
for (i in 1:length(metric)) {
progression[[i]] <- data %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line()+
geom_point()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= animations_subj)) +
geom_line(aes(linetype=animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= animations_subj)) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")+
scale_color_grey() +
theme_classic()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
#theme(legend.position="none")+
theme(legend.position="bottom")+
scale_color_grey() +
theme_classic()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")+
scale_color_grey() +
theme_minimal()
}
progression
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], ncol=2)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], colour = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj, color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj, color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)

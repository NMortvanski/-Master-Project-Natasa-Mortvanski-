CD_merge$condition[CD_merge$condition=="control"] <- "healthy"
CD_merge$condition[CD_merge$condition=="crohns"] <- "CD"
# healthy_disease_2 <- rbind.fill(healthy_disease, before_trans, CD_merge)
healthy_disease_2 <- rbind.fill(all_healthy, IBD, UC, CD_merge)
# Sizes of each dataset
table(healthy_disease_2$condition)
# Do Mann-Whitney-Wilcoxon test to see which parameters show significant differenc between healthy and unhealthy samples
wilcox_p_value <- healthy_disease_2 %>%
summarise(Shannon = wilcox.test(shannon_entropy[condition == "healthy"], shannon_entropy[condition != "healthy"])$p.value,
Chao1 = wilcox.test(chao1[condition == "healthy"], chao1[condition != "healthy"])$p.value,
Menhinick = wilcox.test(menhinick[condition == "healthy"], menhinick[condition != "healthy"])$p.value,
Margalef = wilcox.test(margalef[condition == "healthy"], margalef[condition != "healthy"])$p.value,
Simpson = wilcox.test(simpson[condition == "healthy"], simpson[condition != "healthy"])$p.value,
Fisher = wilcox.test(fisher_alpha[condition == "healthy"], fisher_alpha[condition != "healthy"])$p.value,
Pielou = wilcox.test(pielou_evenness[condition == "healthy"], pielou_evenness[condition != "healthy"])$p.value,
Gini = wilcox.test(gini_index[condition == "healthy"], gini_index[condition != "healthy"])$p.value,
Strong = wilcox.test(strong[condition == "healthy"], strong[condition != "healthy"])$p.value,
Faith = wilcox.test(faith_pd[condition == "healthy"], faith_pd[condition != "healthy"])$p.value)
wilcox_p_value <- t(wilcox_p_value)
colnames(wilcox_p_value) <- c("p.value")
wilcox_p_value <- data.frame(Alpha_Metric = row.names(wilcox_p_value), wilcox_p_value)
wilcox_p_value$p.value <- round(wilcox_p_value$p.value, digits = 5)
wilcox_p_value %>%
add_column(p.adjusted = round(p.adjust(wilcox_p_value$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different parameters between healthy and unhealthy samples")
test_CD_check <- list()
test_CD_check <- do_wilcox_test(CD_check, "condition")
test_CD_check %>%
add_column(p.adjusted = round(p.adjust(test_CD_check$p.value, "fdr"), digits=5), .after='p.value') %>%
filter(group1 == "control(AGP)" & group2 == "control_2") %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "AGP vs controls in CD_2 dataset")
kruskal_results <- healthy_disease_2 %>%
summarise(Shannon = kruskal.test(healthy_disease_2$shannon_entropy ~ healthy_disease_2$condition)$p.value,
Chao1 = kruskal.test(healthy_disease_2$chao1 ~ healthy_disease_2$condition)$p.value,
Fisher = kruskal.test(healthy_disease_2$fisher_alpha ~ healthy_disease_2$condition)$p.value,
Margalef =kruskal.test(healthy_disease_2$margalef ~ healthy_disease_2$condition)$p.value,
Simpson = kruskal.test(healthy_disease_2$simpson ~ healthy_disease_2$condition)$p.value,
Menhinick = kruskal.test(healthy_disease_2$menhinick ~ healthy_disease_2$condition)$p.value,
Pielou = kruskal.test(healthy_disease_2$pielou_evenness ~ healthy_disease_2$condition)$p.value,
Gini = kruskal.test(healthy_disease_2$gini_index ~ healthy_disease_2$condition)$p.value,
Strong = kruskal.test(healthy_disease_2$strong ~ healthy_disease_2$condition)$p.value,
Faith = kruskal.test(healthy_disease_2$faith_pd ~ healthy_disease_2$condition)$p.value)
kruskal_results <- as.data.frame(t(kruskal_results))
colnames(kruskal_results) <- c("p.value")
kruskal_results <- data.frame(Alpha_Metric = row.names(kruskal_results), kruskal_results)
kruskal_results$p.value <- round(kruskal_results$p.value, digits = 5)
kruskal_results %>%
add_column(p.adjusted = round(p.adjust(kruskal_results$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 2) %>%
bold(~ p.adjusted < 0.05, 3) %>%
add_header_lines(values = "Results of the Kruskal-Wallis test for differentiation of different parameters across different conditions")
table(CDI$PPI_use)
table(CDI$prior_antibiotics)
table(CDI$response_to_treatment)
table(CDI$recurrence)
table(CDI$severe_CDI)
#install.packages("expss")
library(expss)
cross_cases(CDI, severe_CDI, prior_antibiotics)
cross_cases(CDI, severe_CDI, response_to_treatment)
cross_cases(CDI, severe_CDI, recurrence)
cross_cases(CDI, response_to_treatment, recurrence)
CDI$condition <- "CDI"
for (i in 1:nrow(CDI)){
if (CDI$BMI[i] < 25){
CDI$BMI_cat[i] <- "normal"
} else {
CDI$BMI_cat[i] <- "obese"
}
}
table(CDI$BMI_cat)
violin_CDI_BMI <- vector('list', length(metric))
# Use violin function
violin_CDI_BMI <- plot_violin(CDI, "BMI_cat")
#violin_CDb
grid.arrange(violin_CDI_BMI[[1]], violin_CDI_BMI[[2]], violin_CDI_BMI[[3]], violin_CDI_BMI[[4]], violin_CDI_BMI[[5]], violin_CDI_BMI[[6]], violin_CDI_BMI[[7]], violin_CDI_BMI[[8]], violin_CDI_BMI[[9]], violin_CDI_BMI[[10]], ncol=3)
test_CDI_BMI <- list()
test_CDI_BMI <- do_wilcox_test(CDI, "BMI_cat")
test_CDI_BMI <- test_CDI_BMI %>%
add_column(p.adjusted = round(p.adjust(test_CDI_BMI$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for...")
test_CDI_BMI
CDI_check <- rbind.fill(CDI, all_healthy)
violin_CDI_healthy <- vector('list', length(metric))
# Use violin function
violin_CDI_healthy <- plot_violin(CDI_check, "condition")
#violin_CDb
grid.arrange(violin_CDI_healthy[[1]], violin_CDI_healthy[[2]], violin_CDI_healthy[[3]], violin_CDI_healthy[[4]], violin_CDI_healthy[[5]], violin_CDI_healthy[[6]], violin_CDI_healthy[[7]], violin_CDI_healthy[[8]], violin_CDI_healthy[[9]], violin_CDI_healthy[[10]], ncol=3)
test_CDI_healthy <- list()
test_CDI_healthy <- do_wilcox_test(CDI_check, "condition")
test_CDI_healthy <- test_CDI_healthy %>%
add_column(p.adjusted = round(p.adjust(test_CDI_healthy$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of different groups of Crhohn's disease patients")
test_CDI_healthy
table(CDI_FMT$disease_state)
table(CDI_FMT$animations_subject)
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD1"] <-'subject_1'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD2"] <-'subject_2'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD3"] <-'subject_3'
CDI_FMT$animations_subject[CDI_FMT$animations_subject == "CD4"] <-'subject_4'
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
facet_wrap(dplyr::vars(CDI_FMT$animations_subject), scale="free", ncol=2)
}
progression
#dplyr::vars(CDI_FMT$animations_subject)
table(FMT_IBD_CDI$condition)
table(FMT_IBD_CDI$day_since_fmt)
violin_trans_2 <- vector('list', length(metric))
for (i in 1:length(metric)){
mean_line <- FMT_IBD_CDI %>% dplyr::group_by(condition, day_since_fmt) %>% dplyr::summarise(grp_mean = mean(.data[[metric[i]]]))
violin_trans_2[[i]] <- FMT_IBD_CDI %>%
mutate(across(day_since_fmt, factor, levels=c("-1","7","28","NA-Donor"))) %>%
ggplot(aes(x = .data[[metric[i]]], y = day_since_fmt, color = day_since_fmt, fill = day_since_fmt)) +
geom_violin()+
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_vline(data = mean_line, aes(xintercept = grp_mean, color = day_since_fmt), linetype = "dashed")+
labs(x = metric[i])+
ylab("") +
facet_wrap(dplyr::vars(condition), nrow=1)+
theme(legend.position="none")
if(metric[i] != "shannon_entropy" & metric[i] !="strong" & metric[i] != "gini_index"  &  metric[i] != "menhinick"){
violin_trans_2 [[i]] <- violin_trans_2 [[i]] +
scale_x_continuous(trans = 'log10') +
xlab(paste(metric[i], "(log10)", sep = " "))
}
}
#plots for Shannon entropy
violin_trans_2
cond <- c("CDI + UC", "CDI", "CDI + CD")
test_CDI_trans <- list()
table <- list()
for (i in 1:length(cond)){
FMT_IBD_CDI_1 <- FMT_IBD_CDI %>%
filter(condition == cond[i])
test_CDI_trans <- do_wilcox_test(FMT_IBD_CDI_1, "day_since_fmt")
table <- test_CDI_trans %>%
add_column(p.adjusted = round(p.adjust(test_CDI_trans$p.value, "fdr"), digits=5), .after='p.value') %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = paste("Results of the Mann-Whitney-Wilcoxon test for condition:", cond[i], sep = " "))
print(table)
test_CDI_trans <- list()
}
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv.gz"))
metadata
# Importing ASVs abundance file
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
BiocManager::install("phyloseq")
library(phyloseq)
# Importing ASVs abundance file
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
#BiocManager::install("phyloseq")
remotes::install_github("jbisanz/qiime2R")
library(qiime2R)
# Importing ASVs abundance file
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv.gz"))
# Importing tree
tree <- read_qza(here("00_raw_data/07_hospital_CDI","rooted-tree.qza"))
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
tax_table
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
ASVs$data
tree$data
tax_table
metadata
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
taxa_names()
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
taxa_names(tree$data)
taxa_names(ASVs$data)
taxa_names(tax_table)
taxa_names(tree$data)
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
phy <- qza_to_phyloseq(here("00_raw_data/07_hospital_CDI","table.qza"), here("00_raw_data/07_hospital_CDI","rooted-tree.qza"), here("00_raw_data/07_hospital_CDI","taxonomy.qza"),here("00_raw_data/07_hospital_CDI","sample_metadata.tsv")
# check for features of data
summarize_phyloseq(phy)
phy <- qza_to_phyloseq(here("00_raw_data/07_hospital_CDI","table.qza"), here("00_raw_data/07_hospital_CDI","rooted-tree.qza"), here("00_raw_data/07_hospital_CDI","taxonomy.qza"),here("00_raw_data/07_hospital_CDI","sample_metadata.tsv"))
phy <- qza_to_phyloseq(ASVs, metadata, tree, taxonomy)
phy <- qza_to_phyloseq(ASVs, metadata, tree, taxonomy)
phy <- qza_to_phyloseq(ASVs, tree, taxonomy)
phy <- qza_to_phyloseq(here("00_raw_data/07_hospital_CDI","table.qza"), here("00_raw_data/07_hospital_CDI","rooted-tree.qza"), here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
tax_table(tax_table)
)
ASVs$data
tax_table
ASVs$data
tax_table
taxonomy$data$Feature.ID
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Creating phyloseq object
physeq<-qza_to_phyloseq(
features = here("00_raw_data/07_hospital_CDI","table.qza"),
tree = here("00_raw_data/07_hospital_CDI","rooted-tree.qza"),
here("00_raw_data/07_hospital_CDI","taxonomy.qza"),
metadata = here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv.gz")
)
phy <- qza_to_phyloseq(ASVs, taxonomy)
phy <- qza_to_phyloseq(ASVs)
tax_table
rownames(tax_table) <- taxonomy<-parse_taxonomy(taxonomy$data)
taxonomy <- parse_taxonomy(taxonomy$data)
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
taxonomy_table <- parse_taxonomy(taxonomy$data)
taxonomy_table
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
tax_table
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
tax_table
taxonomy$data$Feature.ID
tree$data
ASVs
ASVs$data
metadata
tax_table
taxa_names(tree$data)
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
facet_wrap(dplyr::vars(CDI_FMT$animations_subject), scale="free", ncol=2)
}
progression
#dplyr::vars(CDI_FMT$animations_subject)
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()
}
progression
#dplyr::vars(CDI_FMT$animations_subject)
progression <- vector('list', length(metric))
for (i in 1:length(metric)){
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
facet_wrap(dplyr::vars(CDI_FMT$animations_subject), scale="free", ncol=2)
}
progression
#dplyr::vars(CDI_FMT$animations_subject)
taxonomy_table
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv.gz"))
# Importing tree
tree <- read_qza(here("00_raw_data/07_hospital_CDI","rooted-tree.qza"))
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Importing ASVs abundance file
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv.gz"))
# Importing tree
tree <- read_qza(here("00_raw_data/07_hospital_CDI","rooted-tree.qza"))
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv"))
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Importing ASVs abundance file
ASV_tutorial <- read_gza("~/Downloads/table.qza")
# Importing ASVs abundance file
ASV_tutorial <- read_gza("~/Downloads/table.qza")
library(qiime2R)
# Importing ASVs abundance file
ASV_tutorial <- read_qza("~/Downloads/table.qza")
ASV_tutorial$data
ASVs$data
View(metadata)
metadata_tutorial <- read.delim("~/Downloads/sample-metadata.tsv")
tree_tutorial <- read_qza("~/Downloads/rooted-tree.qza")
taxonomy_tutorial <- read_qza("~/Downloads/taxonomy.qza")
metadata_tutorial
metadata_tutorial <- metadata_tutorial[-1,]
tax_table <- do.call(rbind, strsplit(as.character(taxonomy_tutorial$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy_tutorial$data$Feature.ID
physeq <- phyloseq(
otu_table(ASV_tutorial$data, taxa_are_rows = T),
phy_tree(tree_tutorial$data),
tax_table(tax_table),
sample_data(metadata_tutorial)
)
sample_names(metadata_tutorial)
sample_names(ASV_tutorial$data)
sample_names(tax_table)
sample_names(metadata_tutorial)
physeq <- phyloseq(
otu_table(ASV_tutorial$data, taxa_are_rows = T),
tax_table(tax_table),
)
physeq <- phyloseq(
otu_table(ASV_tutorial$data, taxa_are_rows = T),
tax_table(tax_table)
)
phy <- qza_to_phyloseq("~/Downloads/table.qza", "~/Downloads/rooted-tree.qza", "~/Downloads/taxonomy.qza","~/Downloads/sample_metadata.tsv")
setwd("~/Downloads")
phy <- qza_to_phyloseq("table.qza", "rooted-tree.qza", "taxonomy.qza","sample_metadata.tsv")
phy <- qza_to_phyloseq("table.qza", "rooted-tree.qza", "taxonomy.qza","sample-metadata.tsv")
phy <- qza_to_phyloseq("table.qza", "rooted-tree.qza", "taxonomy.qza","sample-metadata.tsv")
setwd("~/Desktop/master_project/Master-Project-Natasa-Mortvanski")
taxonomy
ASVs
ASVs
ASVs$data
View(metadata)
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv"))
# Importing tree
tree <- read_qza(here("00_raw_data/07_hospital_CDI","rooted-tree.qza"))
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
taxonomy_table <- parse_taxonomy(taxonomy$data)
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
taxonomy$data$Taxon
taxonomy$data
taxonomy$data$Feature.ID
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
# Importing taxonomy
taxonomy <- read_qza(here("00_raw_data/07_hospital_CDI","taxonomy.qza"))
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
tax_table
taxa_names(tax_table)
taxa_names(taxonomy)
taxa_names(taxonomy$data)
taxa_names(tree$data)
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
hospital_CDI_pre_FMT$condition
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv"))
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
ASVs$data
View(ASVs)
ASVs <- read_qza(here("00_raw_data/07_hospital_CDI","table.qza"))
ASVs$data
names(ASVs$data)
class(ASVs$data)
class(ASVs)
colnames(ASVs$data)
ncol(ASVs$data)
# Importing metadata
metadata <- read.delim(here("00_raw_data/07_hospital_CDI", "sample-metadata.tsv"))
tree$data
View(tree)
taxa_names(tree$data)
sample_names(tree$data)
taxa_names(tree$data)
tax_table
# Creating phyloseq object
physeq <- phyloseq(
otu_table(ASVs$data, taxa_are_rows = TRUE),
phy_tree(taxa_names(tree$data)),
tax_table(tax_table),
sample_data(metadata)
)
class(tree$data)
taxonomy_table <- parse_taxonomy(taxonomy$data)
phyloseq(
otu_table(ASVs$data, taxa_are_rows=T),
tax_table(taxonomy_table)
)
taxonomy_table
phyloseq(
otu_table(ASVs$data, taxa_are_rows=T),
tax_table(tax_table)
)
class(ASVs$data)
phyloseq(
otu_table(ASVs$data, taxa_are_rows=T),
tax_table(tax_table)
)

age_cat== "50s" |
age_cat== "60s")
# Filter out stool and feces samples
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(sample_type=="feces" |
sample_type=="Stool")
#Keep only samples with normal BMI
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 25)
# Filtering criteria No. 1
## Other solution is to apply only filters used in original AGP study:
AGP_healthy_subset_1 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition")
# Filtering criteria No. 2
## AGP filters + no IBS or Cdiff
AGP_healthy_subset_2 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition")
# Filtering criteria No. 3
## Include only samples that have reported not having any of the following diseases
AGP_healthy_subset_3 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition" &
cancer=="I do not have this condition" &
mental_illness=="No" &
mental_illness_type_substance_abuse=="false" &
mental_illness_type_depression=="false" &
asd=="I do not have this condition" &
alzheimers=="I do not have this condition" &
add_adhd=="I do not have this condition" &
epilepsy_or_seizure_disorder=="I do not have this condition" &
sibo=="I do not have this condition" &   # small intestinal bacterial overgrowth
pku =="I do not have this condition" &   # phenylketonuria
thyroid=="I do not have this condition" &
kidney_disease=="I do not have this condition" &
clinical_condition=="I do not have this condition" &
acid_reflux=="I do not have this condition" &
autoimmune=="I do not have this condition" &
cardiovascular_disease=="I do not have this condition" &
lung_disease =="I do not have this condition" &
liver_disease =="I do not have this condition")
# Number of samples without any reported clinical condition
nrow(AGP_healthy_subset_1)  #861
# Number of samples after filtering only by criteria reported by AGP paper
nrow(AGP_healthy_subset_2)  #3275
# Number of samples after filtering only by criteria reported by AGP paper + without IBS and Cdiff
nrow(AGP_healthy_subset_3)  #2145
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#install.packages('purrr')
library(purrr)
library(tibble)
library(ggplot2)
library(stringr)
library(RColorBrewer)
library(gridExtra)
library(grid)
#install.packages("here")
library(here)
AGP_metadata <- read.delim(here("00_raw_data/01_AGP_data", "10317_20221012-092710.txt.gz"))
nrow(AGP_metadata)
shannon_AGP <- read.delim(here("00_raw_data/01_AGP_data", "shannon_AGP_all.tsv.gz"))
chao1_AGP <- read.delim(here("00_raw_data/01_AGP_data", "chao1_AGP_all.tsv.gz"))
menhinick_AGP <- read.delim(here("00_raw_data/01_AGP_data", "menhinick_AGP_all.tsv.gz"))
margalef_AGP <- read.delim(here("00_raw_data/01_AGP_data", "margalef_AGP_all.tsv.gz"))
simpson_AGP <- read.delim(here("00_raw_data/01_AGP_data", "simpson_AGP_all.tsv.gz"))
fisher_AGP <- read.delim(here("00_raw_data/01_AGP_data", "fisher_AGP_all.tsv.gz"))
gini_AGP <- read.delim(here("00_raw_data/01_AGP_data", "gini_AGP_all.tsv.gz"))
strong_AGP <- read.delim(here("00_raw_data/01_AGP_data", "strong_AGP_all.tsv.gz"))
faith_AGP <- read.delim(here("00_raw_data/01_AGP_data", "faith_AGP_all.tsv.gz"))
pielou_AGP <- read.delim(here("00_raw_data/01_AGP_data", "pielou_AGP_all.tsv.gz"))
# Make inverse Simpson
#simpson_AGP$inverse_simpson <- sapply(simpson_AGP$simpson, function(x) 1/x)
names(faith_AGP)[names(faith_AGP) == 'X.SampleID'] <- 'X'
# Merge all alpha diversity tables
all_alpha <- list(shannon_AGP, chao1_AGP, menhinick_AGP, margalef_AGP, fisher_AGP, gini_AGP, strong_AGP, simpson_AGP, faith_AGP, pielou_AGP)
all_alpha <- all_alpha %>% reduce(inner_join, by="X")
names(all_alpha)[names(all_alpha) == 'X'] <- 'sample_id'
nrow(all_alpha)
# Merge all_alpha and AGP_metadata
AGP <- all_alpha %>% left_join(AGP_metadata, by=c('sample_id' = 'sample_name'))
# Replace NA with empty string
AGP <- replace(AGP, is.na(AGP), "")
nrow(AGP)
# Filter samples by age (only adult samples)
AGP_healthy_subset <- AGP %>%
filter(age_cat== "20s" |
age_cat== "30s" |
age_cat== "40s" |
age_cat== "50s" |
age_cat== "60s")
# Filter out stool and feces samples
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(sample_type=="feces" |
sample_type=="Stool")
#Keep only samples with normal BMI
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 25)
# Filtering criteria No. 1
## Other solution is to apply only filters used in original AGP study:
AGP_healthy_subset_1 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition")
# Filtering criteria No. 2
## AGP filters + no IBS or Cdiff
AGP_healthy_subset_2 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition")
# Filtering criteria No. 3
## Include only samples that have reported not having any of the following diseases
AGP_healthy_subset_3 <- AGP_healthy_subset %>%
filter(antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition" &
cancer=="I do not have this condition" &
mental_illness=="No" &
mental_illness_type_substance_abuse=="false" &
mental_illness_type_depression=="false" &
asd=="I do not have this condition" &
alzheimers=="I do not have this condition" &
add_adhd=="I do not have this condition" &
epilepsy_or_seizure_disorder=="I do not have this condition" &
sibo=="I do not have this condition" &   # small intestinal bacterial overgrowth
pku =="I do not have this condition" &   # phenylketonuria
thyroid=="I do not have this condition" &
kidney_disease=="I do not have this condition" &
clinical_condition=="I do not have this condition" &
acid_reflux=="I do not have this condition" &
autoimmune=="I do not have this condition" &
cardiovascular_disease=="I do not have this condition" &
lung_disease =="I do not have this condition" &
liver_disease =="I do not have this condition")
# Number of samples without any reported clinical condition
nrow(AGP_healthy_subset_1)  #2292
# Number of samples after filtering only by criteria reported by AGP paper
nrow(AGP_healthy_subset_2)  #1465
# Number of samples after filtering only by criteria reported by AGP paper + without IBS and Cdiff
nrow(AGP_healthy_subset_3)  #600
# make tables of summaries of all 4 subsets of AGP data
tabs <- list()
subsets <- list(AGP_healthy_subset, AGP_healthy_subset_1, AGP_healthy_subset_2, AGP_healthy_subset_3)
for(x in 1:length(subsets)){
tabs[[x]] <- subsets[[x]] %>%
summarise(shannon_entropy,
chao1,
menhinick,
margalef,
simpson,
pielou_evenness,
#inverse_simpson,
fisher_alpha,
gini_index,
strong,
faith_pd) %>%
broom::tidy()
}
# Extract minimums, means and maximums of each metric and combine them in new tables
cols <- c("column", "mean", "min", "max")
metric <- c("shannon_entropy", "chao1", "menhinick", "margalef", "fisher_alpha", "simpson", "gini_index", "strong", "pielou_evenness", "faith_pd" )
alpha_tables <- list()
for (i in 1:length(metric)){
alpha_tables[[i]] <- tibble()
for (x in tabs){
alpha_tables[[i]] <- bind_rows(alpha_tables[[i]], filter(x, column == metric[[i]]))
}
alpha_tables[[i]] <- alpha_tables[[i]][, names(alpha_tables[[i]]) %in% cols]
alpha_tables[[i]] <- alpha_tables[[i]] %>% add_column(subsample = c("AGP fecal samples of participants aged 20-69", "healthy AGP participants without any reported disease", "healthy AGP participants (AGP paper criteria)", "healthy AGP participants (AGP paper criteria + no IBD nor Cdiff)"), .before = "column")
}
all_alpha_tables<- tibble()
for(x in 1:length(alpha_tables)){
all_alpha_tables <- bind_rows(all_alpha_tables, alpha_tables[[x]])
}
# Plot values of min, mean and max for each subset of AGP data
all_alpha_tables %>%
ggplot(aes(x= min, y=subsample)) +
geom_dotplot(binaxis='y', stackdir='center') +
theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust=1)) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 35))+
facet_wrap(column ~ ., scales = "free_x", ncol=5)
all_alpha_tables %>%
ggplot(aes(x= mean, y=subsample)) +
geom_dotplot(binaxis='y', stackdir='center') +
theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust=1)) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 35))+
facet_wrap(column ~ ., scales = "free_x", ncol=5)
all_alpha_tables %>%
ggplot(aes(x= max, y=subsample)) +
geom_dotplot(binaxis='y', stackdir='center') +
theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust=1)) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 35))+
facet_wrap(column ~ ., scales = "free_x", ncol=5)
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
colors <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
library(purrr)
subset_list <- list(AGP_healthy_subset, AGP_healthy_subset_1, AGP_healthy_subset_2, AGP_healthy_subset_3)
subset_names <- c("AGP_healthy_subset", "AGP_healthy_subset_1", "AGP_healthy_subset_2", "AGP_healthy_subset_3")
subset_list <- setNames(subset_list, subset_names)
histo <- vector('list', length(subset_list)*length(metric))
for (i in 1:length(metric)){
for (j in 1:length(subset_list)){
histo[[i]][[j]] <- subset_list[[j]] %>% ggplot(aes(x = .data[[metric[i]]])) +
geom_histogram(aes(y=..density..), colour="black", fill="white", bins=30)+
geom_density(alpha=.2, fill=colors[i]) +
xlab(label = paste(names(subset_list[j]),"(n =", nrow(subset_list[[j]]), ")", sep=' ')) +
ylab(label ="density")
}
}
plot_list <- list()
for (i in 1:length(metric)){
plot_list[[i]] <- list()
for (j in 1:length(subset_list)){
plot_list[[i]][[j]] <- histo[[i]][[j]]
}
}
for (i in 1:length(metric)){
grid.arrange(grobs = plot_list[[i]], ncol=2, top = textGrob(paste ("Density distributions of data in different subsets (different filtering criteria) for alpha metric:", metric[i], sep =" "), gp=gpar(fontsize=10,font=2)))
}
all_alpha_tables
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
#install.packages('cowplot')
library(cowplot)
library(tibble)
library(flextable)
#install.packages('nortest')
library(nortest)
#install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
library(corrplot)
library(RColorBrewer)
library(here)
AGP <- read.csv(here("01_tidy_data", "AGP_all.csv.gz"), header = TRUE, sep = ",")
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
#install.packages('cowplot')
library(cowplot)
library(tibble)
library(flextable)
#install.packages('nortest')
library(nortest)
#install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
library(corrplot)
library(RColorBrewer)
library(here)
AGP <- read.csv(here("01_tidy_data", "AGP_all.csv.gz"), header = TRUE, sep = ",")
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
#install.packages('cowplot')
library(cowplot)
library(tibble)
library(flextable)
#install.packages('nortest')
library(nortest)
#install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
library(corrplot)
library(RColorBrewer)
library(here)
AGP <- read.csv(here("01_tidy_data", "AGP_all.csv.gz"), header = TRUE, sep = ",")
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
#nrow(AGP)
nrow(all_healthy)
metric <- c("shannon_entropy", "chao1", "menhinick", "margalef", "fisher_alpha", "simpson", "gini_index", "strong", "pielou_evenness", "faith_pd" )
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
colors <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
histo <- vector('list', length(metric))
for (i in 1:length(metric)){
histo[[i]] <- all_healthy %>% ggplot(aes(x = .data[[metric[i]]])) +
geom_histogram(aes(y=..density..), colour="black", fill="white", bins=30)+
geom_density(alpha=.2, fill=colors[i]) +
xlab(label = metric[i]) +
ylab(label = "density")
}
grid.arrange(histo[[1]], histo[[2]],histo[[3]], histo[[4]],histo[[5]], histo[[6]],histo[[7]], histo[[8]],histo[[9]], histo[[10]], ncol=3, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in healthy dataset", gp=gpar(fontsize=10,font=2)))
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
stat_ad <- lapply(stat_ad, unname) %>% unlist(stat_ad)
pval_ad <- unlist(pval_ad)
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
flextable() %>%
arrange(p.value)  %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
arrange(p.value)  %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
desc(p.value)  %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
stat_ad <- lapply(stat_ad, unname) %>% unlist(stat_ad)
pval_ad <- unlist(pval_ad)
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
desc(p.value)  %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
stat_ad <- lapply(stat_ad, unname) %>% unlist(stat_ad)
pval_ad <- unlist(pval_ad)
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
arrange(p.value)  %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
arrange(desc(p.value))  %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad) %>%
round(p.value, digits = 3)
table_anderson <- data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad)
table_anderson
table_anderson$p.value <- round(table_anderson$p.value, digits = 3)
table_anderson
table_anderson %>%
arrange(desc(p.value)) %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
#install.packages('cowplot')
library(cowplot)
library(tibble)
library(flextable)
#install.packages('nortest')
library(nortest)
#install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
library(corrplot)
library(RColorBrewer)
library(here)
AGP <- read.csv(here("01_tidy_data", "AGP_all.csv.gz"), header = TRUE, sep = ",")
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
#nrow(AGP)
nrow(all_healthy)
metric <- c("menhinick", "margalef", "faith_pd", "chao1", "shannon_entropy", "fisher_alpha", "simpson", "gini_index", "strong", "pielou_evenness")
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
colors <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
histo <- vector('list', length(metric))
for (i in 1:length(metric)){
histo[[i]] <- all_healthy %>% ggplot(aes(x = .data[[metric[i]]])) +
geom_histogram(aes(y=..density..), colour="black", fill="white", bins=30)+
geom_density(alpha=.2, fill=colors[i]) +
xlab(label = metric[i]) +
ylab(label = "density")
}
grid.arrange(histo[[1]], histo[[2]],histo[[3]], histo[[4]],histo[[5]], histo[[6]],histo[[7]], histo[[8]],histo[[9]], histo[[10]], ncol=3, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in healthy dataset", gp=gpar(fontsize=10,font=2)))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
#install.packages('cowplot')
library(cowplot)
library(tibble)
library(flextable)
#install.packages('nortest')
library(nortest)
#install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
library(corrplot)
library(RColorBrewer)
library(here)
AGP <- read.csv(here("01_tidy_data", "AGP_all.csv.gz"), header = TRUE, sep = ",")
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
#nrow(AGP)
nrow(all_healthy)
metric <- c("menhinick", "margalef", "faith_pd", "chao1", "shannon_entropy", "fisher_alpha", "simpson", "gini_index", "strong", "pielou_evenness")
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
colors <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
histo <- vector('list', length(metric))
for (i in 1:length(metric)){
histo[[i]] <- all_healthy %>% ggplot(aes(x = .data[[metric[i]]])) +
geom_histogram(aes(y=..density..), colour="black", fill="white", bins=30)+
geom_density(alpha=.2, fill=colors[i]) +
xlab(label = metric[i]) +
ylab(label = "density")
}
grid.arrange(histo[[1]], histo[[2]],histo[[3]], histo[[4]],histo[[5]], histo[[6]],histo[[7]], histo[[8]],histo[[9]], histo[[10]], ncol=3, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Menhinick's index \n4) Margalef's index 5) Fisher's index 6) Simpson 7) Gini index 8) Strong's index 9) Pielou's evenness \nand 10) Faith's PD in healthy dataset", gp=gpar(fontsize=10,font=2)))
pval_ad <- list()
stat_ad <- list()
for (i in 1:length(metric)){
pval_ad[i] <- ad.test(all_healthy[[metric[i]]])[2]
stat_ad[i] <- ad.test(all_healthy[[metric[i]]])[1]
}
stat_ad <- lapply(stat_ad, unname) %>% unlist(stat_ad)
pval_ad <- unlist(pval_ad)
table_anderson <- data.frame(metric=metric, statistic=stat_ad, p.value=pval_ad)
table_anderson$p.value <- round(table_anderson$p.value, digits = 3)
table_anderson %>%
arrange(desc(p.value)) %>%
flextable() %>%
add_header_lines(values = "Results of the Anderson-Darling Test of distribution normality")
library(corrplot)
metrics <- all_healthy[,2:11]
cor_matrix <- cor(metrics)
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
chart.Correlation(all_healthy[, 2:11], histogram=TRUE, pch=19)
# Identify numeric columns
num_cols <- unlist(lapply(all_healthy, is.numeric))
# Subset numeric columns of data
data_num <- all_healthy[ , num_cols]
data_num$birth_year <- NULL
# Save results as data frame
correlation_num <- as.data.frame(cor(data_num[-c(11:14)], data_num[-c(1:10)]))
correlation_num %>% tibble::rownames_to_column() %>% flextable()
# Plot correlation
cor_matrix <- cor(data_num[-c(1:10)], data_num[-c(11:14)])
corrplot(cor_matrix, tl.col = "black", tl.srt = 45)
# Identify numeric columns
num_cols <- unlist(lapply(all_healthy, is.numeric))
# Subset numeric columns of data
data_num <- all_healthy[ , num_cols]
data_num$birth_year <- NULL
# Save results as data frame
correlation_num <- as.data.frame(cor(data_num[-c(11:14)], data_num[-c(1:10)]))
correlation_num %>% tibble::rownames_to_column() %>% flextable()
# Plot correlation
cor_matrix <- cor(data_num[-c(1:10)], data_num[-c(11:14)])
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, cl.lim = c(-0.5, 0.5), is.corr = FALSE)
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, cl.lim = c(-0.5, 0.5))
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE)
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE, order ='hclust')
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE, order ='AOE')
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, order ='AOE')
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE, order ='FPC')
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE, order ='FPC')
corrplot(cor_matrix, method = 'color', tl.col = "black", tl.srt = 45, is.corr = FALSE)
corrplot(cor_matrix, type = "upper", order = "hclust", addrect = 3,
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, type = "upper", order = "hclust", addrect = 2,
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
metrics <- all_healthy[,2:11]
cor_matrix <- cor(metrics)
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
metrics <- all_healthy[,2:11]
cor_matrix <- cor(metrics)
corrplot(cor_matrix, type = "upper", order = "hclust", addrect = 2,
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, type = "upper", order = "hclust", addrect = 3,
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, order = 'hclust', addrect = 2)
corrplot(cor_matrix, order = 'hclust', addrect = 3)
corrplot(cor_matrix, order = 'hclust', addrect = 3, tl.col = "black", tl.srt = 45)

grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(y="")
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(y="")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(x="")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
labs(x="none")+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
theme(legend.position="none")
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= CDI_FMT$animations_subj)) +
geom_line()+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
subjects <- unique(CDI_FMT$animations_subject)
data <- CDI_FMT[CDI_FMT$animations_subject == subjects[1],]
for (i in 1:length(metric)) {
progression[[i]] <- data %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line()+
geom_point()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= animations_subj)) +
geom_line(aes(linetype=animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color= animations_subj)) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")+
scale_color_grey() +
theme_classic()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
#theme(legend.position="none")+
theme(legend.position="bottom")+
scale_color_grey() +
theme_classic()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]])) +
geom_line(aes(linetype=CDI_FMT$animations_subj))+
geom_point()+
theme(legend.position="none")+
scale_color_grey() +
theme_minimal()
}
progression
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], ncol=2)
grid.arrange(progression[[1]], progression[[2]], ncol=2)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], colour = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj, color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")+
theme_minimal()
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], group = CDI_FMT$animations_subj, color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
for (i in 1:length(metric)) {
progression[[i]] <- CDI_FMT %>% ggplot(aes(x=day_since_fmt, y= .data[[metric[i]]], color =CDI_FMT$animations_subj)) +
geom_line()+
geom_point() +
theme(legend.position="none")
}
grid.arrange(progression[[1]], progression[[2]], progression[[3]], progression[[4]], progression[[5]], ncol=3)
grid.arrange(progression[[6]], progression[[7]], progression[[8]], progression[[9]], progression[[10]], ncol=3)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readr")
library("readr")
#install.packages('data.table')
library(data.table)
library(stringr)
#install.packages('ggplot2')
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
library(purrr)
library(dplyr)
#install.packages('flextable')
library(flextable)
library(tibble)
library(ComplexHeatmap)
library(RColorBrewer)
library(ggplotify)
library(here)
library(table1)
library(tidyverse)
# Load healthy samples' table
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
all_healthy <- dplyr::select(all_healthy, sample_id, shannon_entropy, chao1, menhinick, margalef, fisher_alpha, simpson, pielou_evenness, gini_index, strong, simpson, faith_pd, sex, race, host_age, condition)
names(all_healthy)[names(all_healthy) == 'host_age'] <- 'age'
#Load *CDI data from NCBI* data
CDI <- read.csv(here("01_tidy_data", "ncbi_CDI.csv.gz"), header = TRUE, sep = ",")
# Load CDI and donor data from Hospital ClÃ­nic
hospital_CDI <- read.csv(here("01_tidy_data", "hosp_CDI.csv.gz"), header = TRUE, sep = ",")
hospital_donor <- read.csv(here("01_tidy_data", "hosp_donor.csv.gz"), header = TRUE, sep = ",")
metric <- c("chao1", "margalef", "menhinick", "fisher_alpha", "faith_pd", "gini_index", "strong", "pielou_evenness", "shannon_entropy", "simpson")
plot_violin <- function(df, column){
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
mean_line <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::summarise(grp_mean=mean(.data[[metric[i]]]))
plot_data <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::mutate(m = mean(.data[[metric[i]]]))
violin[[i]] <- plot_data %>% ggplot(aes(x = .data[[metric[i]]], y = reorder(.data[[column]], -m), color = .data[[column]], fill = .data[[column]])) +
geom_violin()+
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_vline(data = mean_line, aes(xintercept = grp_mean, color = .data[[column]]), linetype = "dashed")+
labs(x = metric[i])+
ylab("")+
theme(legend.position="none")
if(metric[i] != "shannon_entropy" & metric[i] != "strong" & metric[i] != "gini_index"  & metric[i] != "menhinick"){
violin[[i]] <- violin[[i]] +
scale_x_continuous(trans = 'log10') +
xlab(paste(metric[i], "(log10)", sep = " "))
}
}
return(violin)
}
do_wilcox_test <- function(df, column){
test <- list()
for (i in 1:length(metric)){
test[[i]] <- pairwise.wilcox.test(df[[metric[i]]], df[[column]], p.adjust.method="none") %>%
broom::tidy() %>% add_column(parameter = metric[i], .before='group1')
test[[i]]$p.value <- round(test[[i]]$p.value, digits = 5)
}
tests <- do.call(what = rbind, args = test)
return(tests)
}
table1(~ chao1 + margalef + menhinick + fisher_alpha + faith_pd + gini_index + strong + pielou_evenness + shannon_entropy + simpson | condition, data=hospital_CDI)
violin_hospital_2 <- vector('list', length(metric))
violin_hospital_2 <- plot_violin(hospital_CDI, "condition")
grid.arrange(violin_hospital_2[[1]], violin_hospital_2[[2]], violin_hospital_2[[3]], violin_hospital_2[[4]], violin_hospital_2[[5]], violin_hospital_2[[6]], violin_hospital_2[[7]], violin_hospital_2[[8]], violin_hospital_2[[9]], violin_hospital_2[[10]], ncol=3)
library(ggpubr)
hospital_CDI$condition[hospital_CDI$condition=="Cdif_post"] <- "CDIpost"
hospital_CDI$condition[hospital_CDI$condition=="Cdif_pre"] <- "CDIpre"
my_comparisons <- list( c("CDIpost","CDIpre"),  c("CDIpost","donor"), c("CDIpre","donor"))
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
violin[[i]] <- ggviolin(hospital_CDI, x = "condition", y = metric[i], fill = "condition", alpha = 0.8,
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor"),
add = c("boxplot"), add.params = list(fill = "white")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
#stat_compare_means (label.y = max(hospital_CDI[[metric[i]]]*1.1)) +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(violin[[1]], violin[[2]], violin[[3]], violin[[4]], violin[[5]], violin[[6]], ncol=3)
grid.arrange(violin[[7]], violin[[8]], violin[[9]], violin[[10]], ncol=3)
table(hospital_CDI$condition)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readr")
library("readr")
#install.packages('data.table')
library(data.table)
library(stringr)
#install.packages('ggplot2')
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
library(purrr)
library(dplyr)
#install.packages('flextable')
library(flextable)
library(tibble)
library(ComplexHeatmap)
library(RColorBrewer)
library(ggplotify)
library(here)
library(table1)
library(tidyverse)
# Load healthy samples' table
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
all_healthy <- dplyr::select(all_healthy, sample_id, shannon_entropy, chao1, menhinick, margalef, fisher_alpha, simpson, pielou_evenness, gini_index, strong, simpson, faith_pd, sex, race, host_age, condition)
names(all_healthy)[names(all_healthy) == 'host_age'] <- 'age'
#Load *CDI data from NCBI* data
CDI <- read.csv(here("01_tidy_data", "ncbi_CDI.csv.gz"), header = TRUE, sep = ",")
# Load CDI and donor data from Hospital ClÃ­nic
hospital_CDI <- read.csv(here("01_tidy_data", "hosp_CDI.csv.gz"), header = TRUE, sep = ",")
hospital_donor <- read.csv(here("01_tidy_data", "hosp_donor.csv.gz"), header = TRUE, sep = ",")
hospital_CDI <- rbind.fill(hospital_donor, hospital_CDI)
hospital_CDI$condition[hospital_CDI$condition=="Cdif_post"] <- "CDIpost"
hospital_CDI$condition[hospital_CDI$condition=="Cdif_pre"] <- "CDIpre"
hospital_CDI$condition[hospital_CDI$condition=="healthy_donors"] <- "donor"
metric <- c("chao1", "margalef", "menhinick", "fisher_alpha", "faith_pd", "gini_index", "strong", "pielou_evenness", "shannon_entropy", "simpson")
plot_violin <- function(df, column){
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
mean_line <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::summarise(grp_mean=mean(.data[[metric[i]]]))
plot_data <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::mutate(m = mean(.data[[metric[i]]]))
violin[[i]] <- plot_data %>% ggplot(aes(x = .data[[metric[i]]], y = reorder(.data[[column]], -m), color = .data[[column]], fill = .data[[column]])) +
geom_violin()+
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_vline(data = mean_line, aes(xintercept = grp_mean, color = .data[[column]]), linetype = "dashed")+
labs(x = metric[i])+
ylab("")+
theme(legend.position="none")
if(metric[i] != "shannon_entropy" & metric[i] != "strong" & metric[i] != "gini_index"  & metric[i] != "menhinick"){
violin[[i]] <- violin[[i]] +
scale_x_continuous(trans = 'log10') +
xlab(paste(metric[i], "(log10)", sep = " "))
}
}
return(violin)
}
do_wilcox_test <- function(df, column){
test <- list()
for (i in 1:length(metric)){
test[[i]] <- pairwise.wilcox.test(df[[metric[i]]], df[[column]], p.adjust.method="none") %>%
broom::tidy() %>% add_column(parameter = metric[i], .before='group1')
test[[i]]$p.value <- round(test[[i]]$p.value, digits = 5)
}
tests <- do.call(what = rbind, args = test)
return(tests)
}
table1(~ chao1 + margalef + menhinick + fisher_alpha + faith_pd + gini_index + strong + pielou_evenness + shannon_entropy + simpson | condition, data=hospital_CDI)
violin_hospital_2 <- vector('list', length(metric))
violin_hospital_2 <- plot_violin(hospital_CDI, "condition")
grid.arrange(violin_hospital_2[[1]], violin_hospital_2[[2]], violin_hospital_2[[3]], violin_hospital_2[[4]], violin_hospital_2[[5]], violin_hospital_2[[6]], violin_hospital_2[[7]], violin_hospital_2[[8]], violin_hospital_2[[9]], violin_hospital_2[[10]], ncol=3)
library(ggpubr)
my_comparisons <- list( c("CDIpost","CDIpre"),  c("CDIpost","donor"), c("CDIpre","donor"))
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
violin[[i]] <- ggviolin(hospital_CDI, x = "condition", y = metric[i], fill = "condition", alpha = 0.8,
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor"),
add = c("boxplot"), add.params = list(fill = "white")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
#stat_compare_means (label.y = max(hospital_CDI[[metric[i]]]*1.1)) +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(violin[[1]], violin[[2]], violin[[3]], violin[[4]], violin[[5]], violin[[6]], ncol=3)
grid.arrange(violin[[7]], violin[[8]], violin[[9]], violin[[10]], ncol=3)
#table(hospital_CDI$condition)
box <- vector('list', length(metric))
for (i in 1:length(metric)){
box[[i]] <- ggboxplot(hospital_CDI, x = "condition", y = metric[i], color = "condition",
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(box[[1]], box[[2]], box[[3]], box[[4]], box[[5]], box[[6]], ncol=3)
grid.arrange(box[[7]], box[[8]], box[[9]], box[[10]], ncol=3)
test_CDI_hospital <- list()
test_CDI_hospital <- do_wilcox_test(hospital_CDI, "condition")
test_CDI_hospital_1 <- test_CDI_hospital %>%
add_column(p.adjusted = round(p.adjust(test_CDI_hospital$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of Hospital ClÃ­nic's CDI samples vs healthy control")
test_CDI_hospital_1
hospital_donor_first <- hospital_CDI %>%
filter(condition == "donor")
compare_donors <- rbind.fill(hospital_donor, hospital_donor_first)
compare_donors$condition <- as.factor(compare_donors$condition)
# Sizes of each dataset
table(compare_donors$condition)
for (i in 1:length(metric)){
p<- compare_donors %>% ggplot(aes(x=.data[[metric[i]]], color=condition)) +
geom_density()
print(p)
}
test_donors <- list()
test_donors <- do_wilcox_test(compare_donors, "condition")
test_donors_1 <- test_donors %>%
add_column(p.adjusted = round(p.adjust(test_donors$p.value, "fdr"), digits=5), .after='p.value') %>%
arrange(p.value, parameter)  %>%
flextable() %>%
bold(~ p.value < 0.05, 4) %>%
bold(~ p.adjusted < 0.05, 5) %>%
add_header_lines(values = "Results of the Mann-Whitney-Wilcoxon test for distributions of Hospital ClÃ­nic's CDI samples vs healthy control")
test_donors_1
hospital_CDI_pre_FMT <- hospital_CDI %>%
filter(FMT_pre_post != "post")
compare_hospital <- rbind.fill(hospital_donor, hospital_CDI_pre_FMT)
compare_hospital$condition <- as.factor(compare_hospital$condition)
# Sizes of each dataset
table(compare_hospital$condition)
compare_hospital <- hospital_CDI %>%
filter(FMT_pre_post != "post")
#compare_hospital <- rbind.fill(hospital_donor, hospital_CDI_pre_FMT)
compare_hospital$condition <- as.factor(compare_hospital$condition)
# Sizes of each dataset
table(compare_hospital$condition)
all_data_comparison <- rbind.fill(all_healthy, CDI, hospital_CDI)
all_data_comparison <- dplyr::select(all_data_comparison, shannon_entropy, chao1, menhinick, margalef, fisher_alpha, simpson, gini_index, strong, pielou_evenness, faith_pd, condition)
all_data_comparison$condition[all_data_comparison$condition=="healthy"] <- "AGP"
violin_hospital_compare <- vector('list', length(metric))
violin_hospital_compare <- plot_violin(all_data_comparison, "condition")
# PNG device
#jpeg("my_plot.jpeg", quality = 100)
grid.arrange(violin_hospital_compare[[1]], violin_hospital_compare[[2]], violin_hospital_compare[[3]], violin_hospital_compare[[4]], ncol=2)
#dev.off()
grid.arrange(violin_hospital_compare[[5]], violin_hospital_compare[[6]], violin_hospital_compare[[7]], violin_hospital_compare[[8]], ncol=2)
grid.arrange(violin_hospital_compare[[9]], violin_hospital_compare[[10]], ncol=2)
grid.arrange(violin_hospital_compare[[1]], violin_hospital_compare[[2]], violin_hospital_compare[[3]], violin_hospital_compare[[4]], violin_hospital_compare[[5]], violin_hospital_compare[[6]], violin_hospital_compare[[7]], violin_hospital_compare[[8]], violin_hospital_compare[[9]], ncol=3)
table(all_data_comparison$condition)
table(hospital_CDI$condition)
library(ggpubr)
my_comparisons <- list( c("CDIpost","CDIpre"),  c("CDIpost","donor"), c("CDIpre","donor"))
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
violin[[i]] <- ggviolin(hospital_CDI, x = "condition", y = metric[i], fill = "condition", alpha = 0.8,
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor"),
add = c("boxplot"), add.params = list(fill = "white")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
#stat_compare_means (label.y = max(hospital_CDI[[metric[i]]]*1.1)) +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(violin[[1]], violin[[2]], violin[[3]], violin[[4]], violin[[5]], violin[[6]], ncol=3)
grid.arrange(violin[[7]], violin[[8]], violin[[9]], violin[[10]], ncol=3)
table(hospital_CDI$condition)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readr")
library("readr")
#install.packages('data.table')
library(data.table)
library(stringr)
#install.packages('ggplot2')
library(ggplot2)
library(gridExtra)
library(grid)
library(plyr)
library(purrr)
library(dplyr)
#install.packages('flextable')
library(flextable)
library(tibble)
library(ComplexHeatmap)
library(RColorBrewer)
library(ggplotify)
library(here)
library(table1)
library(tidyverse)
# Load healthy samples' table
all_healthy <- read.csv(here("01_tidy_data", "AGP_healthy.csv.gz"), header = TRUE, sep = ",")
all_healthy <- dplyr::select(all_healthy, sample_id, shannon_entropy, chao1, menhinick, margalef, fisher_alpha, simpson, pielou_evenness, gini_index, strong, simpson, faith_pd, sex, race, host_age, condition)
names(all_healthy)[names(all_healthy) == 'host_age'] <- 'age'
#Load *CDI data from NCBI* data
CDI <- read.csv(here("01_tidy_data", "ncbi_CDI.csv.gz"), header = TRUE, sep = ",")
# Load CDI and donor data from Hospital ClÃ­nic
hospital_CDI <- read.csv(here("01_tidy_data", "hosp_CDI.csv.gz"), header = TRUE, sep = ",")
hospital_donor <- read.csv(here("01_tidy_data", "hosp_donor.csv.gz"), header = TRUE, sep = ",")
hospital_CDI <- rbind.fill(hospital_donor, hospital_CDI)
hospital_CDI$condition[hospital_CDI$condition=="Cdif_post"] <- "CDIpost"
hospital_CDI$condition[hospital_CDI$condition=="Cdif_pre"] <- "CDIpre"
hospital_CDI$condition[hospital_CDI$condition=="healthy_donors"] <- "donor"
metric <- c("chao1", "margalef", "menhinick", "fisher_alpha", "faith_pd", "gini_index", "strong", "pielou_evenness", "shannon_entropy", "simpson")
plot_violin <- function(df, column){
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
mean_line <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::summarise(grp_mean=mean(.data[[metric[i]]]))
plot_data <- df %>% dplyr::group_by(.data[[column]]) %>% dplyr::mutate(m = mean(.data[[metric[i]]]))
violin[[i]] <- plot_data %>% ggplot(aes(x = .data[[metric[i]]], y = reorder(.data[[column]], -m), color = .data[[column]], fill = .data[[column]])) +
geom_violin()+
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_vline(data = mean_line, aes(xintercept = grp_mean, color = .data[[column]]), linetype = "dashed")+
labs(x = metric[i])+
ylab("")+
theme(legend.position="none")
if(metric[i] != "shannon_entropy" & metric[i] != "strong" & metric[i] != "gini_index"  & metric[i] != "menhinick"){
violin[[i]] <- violin[[i]] +
scale_x_continuous(trans = 'log10') +
xlab(paste(metric[i], "(log10)", sep = " "))
}
}
return(violin)
}
do_wilcox_test <- function(df, column){
test <- list()
for (i in 1:length(metric)){
test[[i]] <- pairwise.wilcox.test(df[[metric[i]]], df[[column]], p.adjust.method="none") %>%
broom::tidy() %>% add_column(parameter = metric[i], .before='group1')
test[[i]]$p.value <- round(test[[i]]$p.value, digits = 5)
}
tests <- do.call(what = rbind, args = test)
return(tests)
}
table1(~ chao1 + margalef + menhinick + fisher_alpha + faith_pd + gini_index + strong + pielou_evenness + shannon_entropy + simpson | condition, data=hospital_CDI)
violin_hospital_2 <- vector('list', length(metric))
violin_hospital_2 <- plot_violin(hospital_CDI, "condition")
grid.arrange(violin_hospital_2[[1]], violin_hospital_2[[2]], violin_hospital_2[[3]], violin_hospital_2[[4]], violin_hospital_2[[5]], violin_hospital_2[[6]], violin_hospital_2[[7]], violin_hospital_2[[8]], violin_hospital_2[[9]], violin_hospital_2[[10]], ncol=3)
library(ggpubr)
my_comparisons <- list( c("CDIpost","CDIpre"),  c("CDIpost","donor"), c("CDIpre","donor"))
violin <- vector('list', length(metric))
for (i in 1:length(metric)){
violin[[i]] <- ggviolin(hospital_CDI, x = "condition", y = metric[i], fill = "condition", alpha = 0.8,
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor"),
add = c("boxplot"), add.params = list(fill = "white")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
#stat_compare_means (label.y = max(hospital_CDI[[metric[i]]]*1.1)) +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(violin[[1]], violin[[2]], violin[[3]], violin[[4]], violin[[5]], violin[[6]], ncol=3)
grid.arrange(violin[[7]], violin[[8]], violin[[9]], violin[[10]], ncol=3)
#table(hospital_CDI$condition)
box <- vector('list', length(metric))
for (i in 1:length(metric)){
box[[i]] <- ggboxplot(hospital_CDI, x = "condition", y = metric[i], color = "condition",
palette = "Dark2", order = c("CDIpre", "CDIpost", "donor")) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
xlab("")+
font("xy.text", size = 10) +
rremove("legend")
}
grid.arrange(box[[1]], box[[2]], box[[3]], box[[4]], box[[5]], box[[6]], ncol=3)
grid.arrange(box[[7]], box[[8]], box[[9]], box[[10]], ncol=3)
